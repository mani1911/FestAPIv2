{
    "swagger": "2.0",
    "info": {
        "description": "API Server for all fests",
        "title": "FestAPI v2",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8000",
    "basePath": "/",
    "paths": {
        "/api/admin/login": {
            "post": {
                "description": "Authenticates an admin user and returns a JWT token for authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Authenticate and log in an admin.",
                "operationId": "AuthAdminLogin",
                "parameters": [
                    {
                        "description": "Admin authentication request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/admin/verify": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Verifies the status of an admin.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Verify Admin status.",
                "operationId": "AdminVerify",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/events/abstract/details/{event_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the details of the abstract for the specified event.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Get Event's Abstract Details",
                "operationId": "EventAbstractDetails",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "EventID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.AbstractDetailsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/events/register": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Register the user for the specified event.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Register the user for an event.",
                "operationId": "EventRegister",
                "parameters": [
                    {
                        "description": "Event Registration Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EventRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/events/user/registered": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of events registered by the user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event",
                    "User"
                ],
                "summary": "Get details of events registered by a user.",
                "operationId": "UserEventDetails",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.GetEventDetailsResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/hospi/deleteRoom": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a room with the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Hospi"
                ],
                "summary": "Delete a room.",
                "operationId": "DeleteRoom",
                "parameters": [
                    {
                        "description": "Delete room request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteRoomRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/hospi/getHostels": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the details of the hostels.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hospi"
                ],
                "summary": "Get all the Hostels",
                "operationId": "GetHostels",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.GetHostelsResponse"
                        }
                    },
                    "400": {
                        "description": "Hostels not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/hospi/getRooms": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the details of the rooms along with the hostel name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hospi"
                ],
                "summary": "Get all the Rooms",
                "operationId": "GetRooms",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.GetRoomsResponse"
                        }
                    },
                    "400": {
                        "description": "Rooms not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/hospi/updateHostel": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add/Update a new hostel with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Hospi"
                ],
                "summary": "Add/Update a new hostel.",
                "operationId": "AddUpdateHostel",
                "parameters": [
                    {
                        "description": "Add/update hostel request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddUpdateHostelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/hospi/updateRoom": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add/Update a new room with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Hospi"
                ],
                "summary": "Add/Update a new room.",
                "operationId": "AddUpdateRoom",
                "parameters": [
                    {
                        "description": "Add/update room request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddUpdateRoomRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/dauth/callback": {
            "get": {
                "description": "Callback url for DAuth, returns JWT token if successful",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Authenticate user with DAuth",
                "operationId": "DAuthUserLogin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DAuth code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/details": {
            "get": {
                "security": [
                    {
                        "middleware.UserAuth": []
                    }
                ],
                "description": "profile information to be displayed.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Profile information.",
                "operationId": "ProfileDetails",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ProfileDetailsResponse"
                        }
                    },
                    "400": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/login": {
            "post": {
                "description": "Authenticates a user using email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Authenticate and log in a user.",
                "operationId": "AuthUserLogin",
                "parameters": [
                    {
                        "description": "User authentication request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthUserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/qr": {
            "get": {
                "security": [
                    {
                        "middleware.UserAuth": []
                    }
                ],
                "description": "QR for the profile page.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "QR Generation.",
                "operationId": "ProfileQR",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/register": {
            "post": {
                "description": "Register a new user with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Register a new user.",
                "operationId": "AuthUserRegister",
                "parameters": [
                    {
                        "description": "User registration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthUserRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/update": {
            "patch": {
                "security": [
                    {
                        "middleware.UserAuth": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update user information with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user information.",
                "operationId": "AuthUserUpdate",
                "parameters": [
                    {
                        "description": "User update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthUserUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AbstractDetailsResponse": {
            "type": "object",
            "properties": {
                "forward_email": {
                    "type": "string"
                },
                "max_participants": {
                    "type": "integer"
                }
            }
        },
        "dto.AddUpdateHostelRequest": {
            "type": "object",
            "properties": {
                "gender": {
                    "$ref": "#/definitions/models.Gender"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.AddUpdateRoomRequest": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "hostel_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.AuthAdminRequest": {
            "type": "object",
            "required": [
                "admin_password",
                "admin_username"
            ],
            "properties": {
                "admin_password": {
                    "type": "string"
                },
                "admin_username": {
                    "type": "string"
                }
            }
        },
        "dto.AuthUserLoginRequest": {
            "type": "object",
            "required": [
                "user_email",
                "user_password"
            ],
            "properties": {
                "user_email": {
                    "type": "string"
                },
                "user_password": {
                    "type": "string"
                }
            }
        },
        "dto.AuthUserRegisterRequest": {
            "type": "object",
            "properties": {
                "user_address": {
                    "type": "string"
                },
                "user_city": {
                    "type": "string"
                },
                "user_college": {
                    "type": "string"
                },
                "user_country": {
                    "type": "string"
                },
                "user_degree": {
                    "type": "string"
                },
                "user_email": {
                    "type": "string"
                },
                "user_fullname": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "user_nationality": {
                    "type": "string"
                },
                "user_othercollege": {
                    "type": "string"
                },
                "user_password": {
                    "type": "string"
                },
                "user_phone": {
                    "type": "string"
                },
                "user_pincode": {
                    "type": "string"
                },
                "user_referral_code": {
                    "type": "string"
                },
                "user_sex": {
                    "type": "string"
                },
                "user_sponsor": {
                    "type": "string"
                },
                "user_state": {
                    "type": "string"
                },
                "user_voucher_name": {
                    "type": "string"
                },
                "user_year": {
                    "type": "integer"
                }
            }
        },
        "dto.AuthUserUpdateRequest": {
            "type": "object",
            "properties": {
                "user_address": {
                    "type": "string"
                },
                "user_city": {
                    "type": "string"
                },
                "user_college": {
                    "type": "string"
                },
                "user_country": {
                    "type": "string"
                },
                "user_degree": {
                    "type": "string"
                },
                "user_nationality": {
                    "type": "string"
                },
                "user_othercollege": {
                    "type": "string"
                },
                "user_phone": {
                    "type": "string"
                },
                "user_pincode": {
                    "type": "string"
                },
                "user_referral_code": {
                    "type": "string"
                },
                "user_sex": {
                    "type": "string"
                },
                "user_sponsor": {
                    "type": "string"
                },
                "user_state": {
                    "type": "string"
                },
                "user_voucher_name": {
                    "type": "string"
                },
                "user_year": {
                    "type": "integer"
                }
            }
        },
        "dto.DeleteRoomRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "dto.EventRegistrationRequest": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "integer"
                },
                "team_members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "team_name": {
                    "type": "string"
                }
            }
        },
        "dto.GetEventDetailsResponse": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "integer"
                },
                "event_name": {
                    "type": "string"
                }
            }
        },
        "dto.GetHostelsResponse": {
            "type": "object",
            "properties": {
                "gender": {
                    "$ref": "#/definitions/models.Gender"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.GetRoomsResponse": {
            "type": "object",
            "properties": {
                "gender": {
                    "$ref": "#/definitions/models.Gender"
                },
                "hostel": {
                    "type": "string"
                },
                "hostelID": {
                    "type": "integer"
                },
                "room": {
                    "type": "string"
                },
                "roomID": {
                    "type": "integer"
                }
            }
        },
        "dto.ProfileDetailsResponse": {
            "type": "object",
            "properties": {
                "user_college": {
                    "type": "string"
                },
                "user_degree": {
                    "type": "string"
                },
                "user_fullname": {
                    "type": "string"
                },
                "user_year": {
                    "type": "integer"
                }
            }
        },
        "models.Gender": {
            "type": "string",
            "enum": [
                "MALE",
                "FEMALE",
                "OTHER"
            ],
            "x-enum-varnames": [
                "MALE",
                "FEMALE",
                "OTHER"
            ]
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Authorization token",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}