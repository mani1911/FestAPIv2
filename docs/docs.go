// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/admin/login": {
            "post": {
                "description": "Authenticates an admin user and returns a JWT token for authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Authenticate and log in an admin.",
                "operationId": "AuthAdminLogin",
                "parameters": [
                    {
                        "description": "Admin authentication request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/admin/verify": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Verifies the status of an admin.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Verify Admin status.",
                "operationId": "AdminVerify",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/admin/verify_user": {
            "post": {
                "description": "If providing emailid, info_type should be \"email\" or \"jwt\" for QR.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get the User details.",
                "operationId": "VerifyUser",
                "parameters": [
                    {
                        "description": "User Info request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserInfoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/colleges": {
            "get": {
                "description": "Fetches colleges Id and name of all colleges.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Get details of all colleges",
                "operationId": "Colleges",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.CollegeResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Error fetching colleges",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/events/abstract/details/{event_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the details of the abstract for the specified event.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Get Event's Abstract Details",
                "operationId": "EventAbstractDetails",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "EventID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.AbstractDetailsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/events/register": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Register the user for the specified event.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Register the user for an event.",
                "operationId": "EventRegister",
                "parameters": [
                    {
                        "description": "Event Registration Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EventRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/events/status/:event_id": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the registration status of an event for the given user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Get event status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Event status request object",
                        "name": "eventStatusRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EventStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EventStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/events/user/registered": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of events registered by the user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event",
                    "User"
                ],
                "summary": "Get details of events registered by a user.",
                "operationId": "UserEventDetails",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.GetEventDetailsResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/hospi/allocate/room": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allocates room for a given user if available",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Hospi"
                ],
                "summary": "Allocate room for user",
                "operationId": "AllocateRoom",
                "parameters": [
                    {
                        "description": "Room allocation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AllocateRoomRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/hospi/checkInStatus": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "returns check-details of user if they've paid online",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Hospi"
                ],
                "summary": "Check-In status of a visitor.",
                "operationId": "CheckInStatus",
                "parameters": [
                    {
                        "description": "Check in status request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CheckInStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.CheckInStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/hospi/deleteRoom": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a room with the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Hospi"
                ],
                "summary": "Delete a room.",
                "operationId": "DeleteRoom",
                "parameters": [
                    {
                        "description": "Delete room request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteRoomRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/hospi/getHostels": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the details of the hostels.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hospi"
                ],
                "summary": "Get all the Hostels",
                "operationId": "GetHostels",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.GetHostelsResponse"
                        }
                    },
                    "400": {
                        "description": "Hostels not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/hospi/getRooms": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the details of the rooms along with the hostel name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hospi"
                ],
                "summary": "Get all the Rooms",
                "operationId": "GetRooms",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hostel ID",
                        "name": "hostel_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Floor Number",
                        "name": "floor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "If 0, returns only free rooms. If 1, returns all.",
                        "name": "is_filled",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.GetRoomsResponse"
                        }
                    },
                    "400": {
                        "description": "Rooms not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/hospi/updateHostel": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add/Update a new hostel with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Hospi"
                ],
                "summary": "Add/Update a new hostel.",
                "operationId": "AddUpdateHostel",
                "parameters": [
                    {
                        "description": "Add/update hostel request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddUpdateHostelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/hospi/updateRoom": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add/Update a new room with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Hospi"
                ],
                "summary": "Add/Update a new room.",
                "operationId": "AddUpdateRoom",
                "parameters": [
                    {
                        "description": "Add/update room request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddUpdateRoomRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/pr/register": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Register PR for a person who has just arrived on campus",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "PR"
                ],
                "summary": "Register PR",
                "operationId": "Register",
                "parameters": [
                    {
                        "description": "PR Register Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/pr/registerStatus": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Check the PR Registration Status of a person who has just arrived on campus",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "PR"
                ],
                "summary": "Check PR Registration Status.",
                "operationId": "RegisterStatus",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Email",
                        "name": "user_email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/treasury/addBill": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add a bill with its purpose: checkIn/checkOut/discount/fine/eventPass.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Treasury"
                ],
                "summary": "Add a Bill.",
                "operationId": "AddBill",
                "parameters": [
                    {
                        "description": "Add bill request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddBillRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/treasury/townscript": {
            "post": {
                "description": "Make a payment using Townscript.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Treasury"
                ],
                "summary": "Make a payment using Townscript.",
                "operationId": "Townscript",
                "parameters": [
                    {
                        "description": "Townscript request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Secret Token",
                        "name": "secret",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/dauth/callback": {
            "get": {
                "description": "Callback url for DAuth, returns JWT token if successful",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Authenticate user with DAuth",
                "operationId": "DAuthUserLogin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DAuth code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type of site",
                        "name": "site",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/details": {
            "get": {
                "security": [
                    {
                        "middleware.UserAuth": []
                    }
                ],
                "description": "profile information to be displayed.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Profile information.",
                "operationId": "ProfileDetails",
                "responses": {
                    "400": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/login": {
            "post": {
                "description": "Authenticates a user using email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Authenticate and log in a user.",
                "operationId": "AuthUserLogin",
                "parameters": [
                    {
                        "description": "User authentication request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthUserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/qr": {
            "get": {
                "security": [
                    {
                        "middleware.UserAuth": []
                    }
                ],
                "description": "QR for the profile page.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "QR Generation.",
                "operationId": "ProfileQR",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/register": {
            "post": {
                "description": "Register a new user with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Register a new user.",
                "operationId": "AuthUserRegister",
                "parameters": [
                    {
                        "description": "User registration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthUserRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/update": {
            "patch": {
                "security": [
                    {
                        "middleware.UserAuth": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update user information with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user information.",
                "operationId": "AuthUserUpdate",
                "parameters": [
                    {
                        "description": "User update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthUserUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tshirt/updateSize": {
            "post": {
                "description": "Update the TShirt size for the user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TShirts"
                ],
                "summary": "TShirt Size Update",
                "operationId": "TShirts",
                "parameters": [
                    {
                        "description": "Add/update tshirt size",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TShirtsUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated TShirt Size",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error Updating TShirt Size",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AbstractDetailsResponse": {
            "type": "object",
            "properties": {
                "forward_email": {
                    "type": "string"
                },
                "max_participants": {
                    "type": "integer"
                }
            }
        },
        "dto.AddBillRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "mode": {
                    "type": "string"
                },
                "paid_to": {
                    "$ref": "#/definitions/models.AdminRole"
                },
                "ref_id": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.AddUpdateHostelRequest": {
            "type": "object",
            "properties": {
                "gender": {
                    "$ref": "#/definitions/models.Gender"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.AddUpdateRoomRequest": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "floor": {
                    "type": "integer"
                },
                "hostel_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.AllocateRoomRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "number_of_days": {
                    "type": "integer"
                },
                "room_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.AuthAdminRequest": {
            "type": "object",
            "required": [
                "admin_password",
                "admin_username"
            ],
            "properties": {
                "admin_password": {
                    "type": "string"
                },
                "admin_username": {
                    "type": "string"
                }
            }
        },
        "dto.AuthUserLoginRequest": {
            "type": "object",
            "required": [
                "user_email",
                "user_password"
            ],
            "properties": {
                "user_email": {
                    "type": "string"
                },
                "user_password": {
                    "type": "string"
                }
            }
        },
        "dto.AuthUserRegisterRequest": {
            "type": "object",
            "properties": {
                "user_address": {
                    "type": "string"
                },
                "user_city": {
                    "type": "string"
                },
                "user_college": {
                    "type": "string"
                },
                "user_country": {
                    "type": "string"
                },
                "user_degree": {
                    "type": "string"
                },
                "user_email": {
                    "type": "string"
                },
                "user_fullname": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "user_nationality": {
                    "type": "string"
                },
                "user_othercollege": {
                    "type": "string"
                },
                "user_password": {
                    "type": "string"
                },
                "user_phone": {
                    "type": "string"
                },
                "user_pincode": {
                    "type": "string"
                },
                "user_recaptcha_code": {
                    "type": "string"
                },
                "user_referral_code": {
                    "type": "string"
                },
                "user_sex": {
                    "type": "string"
                },
                "user_sponsor": {
                    "type": "string"
                },
                "user_state": {
                    "type": "string"
                },
                "user_voucher_name": {
                    "type": "string"
                },
                "user_year": {
                    "type": "string"
                }
            }
        },
        "dto.AuthUserUpdateRequest": {
            "type": "object",
            "properties": {
                "user_address": {
                    "type": "string"
                },
                "user_city": {
                    "type": "string"
                },
                "user_college": {
                    "type": "string"
                },
                "user_country": {
                    "type": "string"
                },
                "user_degree": {
                    "type": "string"
                },
                "user_nationality": {
                    "type": "string"
                },
                "user_othercollege": {
                    "type": "string"
                },
                "user_phone": {
                    "type": "string"
                },
                "user_pincode": {
                    "type": "string"
                },
                "user_referral_code": {
                    "type": "string"
                },
                "user_sex": {
                    "type": "string"
                },
                "user_sponsor": {
                    "type": "string"
                },
                "user_state": {
                    "type": "string"
                },
                "user_voucher_name": {
                    "type": "string"
                },
                "user_year": {
                    "type": "string"
                }
            }
        },
        "dto.CheckInStatusRequest": {
            "type": "object",
            "properties": {
                "email_id": {
                    "type": "string"
                }
            }
        },
        "dto.CheckInStatusResponse": {
            "type": "object",
            "properties": {
                "checkedOut": {
                    "type": "boolean"
                },
                "noOfDays": {
                    "type": "integer"
                },
                "roomID": {
                    "type": "integer"
                },
                "startDate": {
                    "type": "string"
                }
            }
        },
        "dto.CollegeResponse": {
            "type": "object",
            "properties": {
                "college_id": {
                    "type": "integer"
                },
                "college_name": {
                    "type": "string"
                }
            }
        },
        "dto.DeleteRoomRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "dto.EventRegistrationRequest": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "integer"
                },
                "team_members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "team_name": {
                    "type": "string"
                }
            }
        },
        "dto.EventStatusRequest": {
            "type": "object",
            "properties": {
                "eventID": {
                    "type": "integer"
                }
            }
        },
        "dto.EventStatusResponse": {
            "type": "object",
            "properties": {
                "is_registered": {
                    "type": "boolean"
                },
                "is_team": {
                    "type": "boolean"
                },
                "team_id": {
                    "type": "integer"
                },
                "team_members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.GetEventDetailsResponse": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "integer"
                },
                "event_name": {
                    "type": "string"
                }
            }
        },
        "dto.GetHostelsResponse": {
            "type": "object",
            "properties": {
                "gender": {
                    "$ref": "#/definitions/models.Gender"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.GetRoomsResponse": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "floor": {
                    "type": "integer"
                },
                "gender": {
                    "$ref": "#/definitions/models.Gender"
                },
                "hostel": {
                    "type": "string"
                },
                "hostelID": {
                    "type": "integer"
                },
                "occupied": {
                    "type": "integer"
                },
                "room": {
                    "type": "string"
                },
                "roomID": {
                    "type": "integer"
                }
            }
        },
        "dto.RegisterRequest": {
            "type": "object",
            "properties": {
                "reg_amount": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.TShirtsUpdateRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "recaptchaCode": {
                    "type": "string"
                },
                "screenshotLink": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                }
            }
        },
        "dto.UserInfoRequest": {
            "type": "object",
            "required": [
                "info_type",
                "user_info"
            ],
            "properties": {
                "info_type": {
                    "type": "string"
                },
                "user_info": {
                    "type": "string"
                }
            }
        },
        "dto.UserInfoResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "college": {
                    "$ref": "#/definitions/dto.CollegeResponse"
                },
                "collegeID": {
                    "type": "integer"
                },
                "country": {
                    "type": "string"
                },
                "degree": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "gender": {
                    "$ref": "#/definitions/models.Gender"
                },
                "id": {
                    "type": "integer"
                },
                "isDauth": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "otherCollege": {
                    "type": "string"
                },
                "password": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "phone": {
                    "type": "string"
                },
                "pincode": {
                    "type": "string"
                },
                "referralCode": {
                    "type": "string"
                },
                "sponsor": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "tshirtSize": {
                    "type": "string"
                },
                "voucherName": {
                    "type": "string"
                },
                "year": {
                    "type": "string"
                }
            }
        },
        "models.AdminRole": {
            "type": "string",
            "enum": [
                "ADMIN",
                "OC",
                "PR",
                "TREZ",
                "CORE",
                "HOSPI"
            ],
            "x-enum-varnames": [
                "ADMIN",
                "OC",
                "PR",
                "TREZ",
                "CORE",
                "HOSPI"
            ]
        },
        "models.Gender": {
            "type": "string",
            "enum": [
                "MALE",
                "FEMALE",
                "OTHER"
            ],
            "x-enum-varnames": [
                "MALE",
                "FEMALE",
                "OTHER"
            ]
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Authorization token",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "FestAPI v2",
	Description:      "API Server for all fests",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
