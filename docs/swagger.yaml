basePath: /
definitions:
  controller.AuthAdminAdminRequest:
    properties:
      admin_password:
        type: string
      admin_username:
        type: string
    type: object
  controller.AuthUserLoginRequest:
    properties:
      user_email:
        type: string
      user_password:
        type: string
    type: object
  controller.AuthUserRegisterRequest:
    properties:
      user_address:
        type: string
      user_city:
        type: string
      user_college:
        type: string
      user_country:
        type: string
      user_degree:
        type: string
      user_email:
        type: string
      user_fullname:
        type: string
      user_name:
        type: string
      user_nationality:
        type: string
      user_othercollege:
        type: string
      user_password:
        type: string
      user_phone:
        type: string
      user_pincode:
        type: string
      user_referral_code:
        type: string
      user_sex:
        type: string
      user_sponsor:
        type: string
      user_state:
        type: string
      user_voucher_name:
        type: string
      user_year:
        type: string
    type: object
  controller.AuthUserUpdateRequest:
    properties:
      user_address:
        type: string
      user_city:
        type: string
      user_college:
        type: string
      user_country:
        type: string
      user_degree:
        type: string
      user_nationality:
        type: string
      user_othercollege:
        type: string
      user_phone:
        type: string
      user_pincode:
        type: string
      user_referral_code:
        type: string
      user_sex:
        type: string
      user_sponsor:
        type: string
      user_state:
        type: string
      user_voucher_name:
        type: string
      user_year:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server for all fests
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: FestAPI v2
  version: "1.0"
paths:
  /admin/login:
    post:
      consumes:
      - application/json
      description: Authenticates an admin using username and password, and returns
        a JWT token for authentication.
      operationId: AuthAdminLogin
      parameters:
      - description: Admin authentication request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.AuthAdminAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Authenticate and log in an admin.
  /admin/verify:
    get:
      description: Verifies the status of an admin.
      operationId: AdminVerify
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - RoleAuth: []
      summary: Verify Admin status.
  /ping:
    get:
      description: Checks if the server is up and running
      parameters:
      - description: DAuth code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
      summary: Ping
  /user/dauth/callback:
    get:
      consumes:
      - application/json
      description: Callback url for DAuth, returns JWT token if successful
      operationId: DAuthUserLogin
      parameters:
      - description: DAuth code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Authenticate user with DAuth
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using email and password.
      operationId: AuthUserLogin
      parameters:
      - description: User authentication request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.AuthUserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Authenticate and log in a user.
  /user/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details.
      operationId: AuthUserRegister
      parameters:
      - description: User registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.AuthUserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Register a new user.
  /user/update:
    put:
      consumes:
      - application/json
      description: Update user information with the provided details.
      operationId: AuthUserUpdate
      parameters:
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.AuthUserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update user information.
swagger: "2.0"
