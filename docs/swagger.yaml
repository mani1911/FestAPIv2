basePath: /
definitions:
  dto.AbstractDetailsResponse:
    properties:
      forward_email:
        type: string
      max_participants:
        type: integer
    type: object
  dto.AddBillRequest:
    properties:
      amount:
        type: number
      mode:
        type: string
      paid_to:
        $ref: '#/definitions/models.AdminRole'
      ref_id:
        type: string
      time:
        type: string
      type:
        type: string
      user_id:
        type: integer
    type: object
  dto.AddUpdateHostelRequest:
    properties:
      gender:
        $ref: '#/definitions/models.Gender'
      id:
        type: integer
      name:
        type: string
    type: object
  dto.AddUpdateRoomRequest:
    properties:
      capacity:
        type: integer
      floor:
        type: integer
      hostel_id:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
  dto.AllocateRoomRequest:
    properties:
      amount:
        type: number
      number_of_days:
        type: integer
      room_id:
        type: integer
      user_id:
        type: integer
    type: object
  dto.AuthAdminRequest:
    properties:
      admin_password:
        type: string
      admin_username:
        type: string
    required:
    - admin_password
    - admin_username
    type: object
  dto.AuthUserLoginRequest:
    properties:
      user_email:
        type: string
      user_password:
        type: string
    required:
    - user_email
    - user_password
    type: object
  dto.AuthUserRegisterRequest:
    properties:
      user_address:
        type: string
      user_city:
        type: string
      user_college:
        type: string
      user_country:
        type: string
      user_degree:
        type: string
      user_email:
        type: string
      user_fullname:
        type: string
      user_name:
        type: string
      user_nationality:
        type: string
      user_othercollege:
        type: string
      user_password:
        type: string
      user_phone:
        type: string
      user_pincode:
        type: string
      user_recaptcha_code:
        type: string
      user_referral_code:
        type: string
      user_sex:
        type: string
      user_sponsor:
        type: string
      user_state:
        type: string
      user_voucher_name:
        type: string
      user_year:
        type: string
    type: object
  dto.AuthUserUpdateRequest:
    properties:
      user_address:
        type: string
      user_city:
        type: string
      user_college:
        type: string
      user_country:
        type: string
      user_degree:
        type: string
      user_nationality:
        type: string
      user_othercollege:
        type: string
      user_phone:
        type: string
      user_pincode:
        type: string
      user_referral_code:
        type: string
      user_sex:
        type: string
      user_sponsor:
        type: string
      user_state:
        type: string
      user_voucher_name:
        type: string
      user_year:
        type: string
    type: object
  dto.CheckInStatusRequest:
    properties:
      email_id:
        type: string
    type: object
  dto.CheckInStatusResponse:
    properties:
      checkedOut:
        type: boolean
      noOfDays:
        type: integer
      roomID:
        type: integer
      startDate:
        type: string
    type: object
  dto.CollegeResponse:
    properties:
      college_id:
        type: integer
      college_name:
        type: string
    type: object
  dto.DeleteRoomRequest:
    properties:
      id:
        type: integer
    type: object
  dto.EventRegistrationRequest:
    properties:
      event_id:
        type: integer
      team_members:
        items:
          type: string
        type: array
      team_name:
        type: string
    type: object
  dto.EventStatusRequest:
    properties:
      eventID:
        type: integer
    type: object
  dto.EventStatusResponse:
    properties:
      is_registered:
        type: boolean
      is_team:
        type: boolean
      team_id:
        type: integer
      team_members:
        items:
          type: string
        type: array
    type: object
  dto.GetEventDetailsResponse:
    properties:
      event_id:
        type: integer
      event_name:
        type: string
    type: object
  dto.GetHostelsResponse:
    properties:
      gender:
        $ref: '#/definitions/models.Gender'
      id:
        type: integer
      name:
        type: string
    type: object
  dto.GetRoomsResponse:
    properties:
      capacity:
        type: integer
      floor:
        type: integer
      gender:
        $ref: '#/definitions/models.Gender'
      hostel:
        type: string
      hostelID:
        type: integer
      occupied:
        type: integer
      room:
        type: string
      roomID:
        type: integer
    type: object
  dto.RegisterRequest:
    properties:
      reg_amount:
        type: string
      user_id:
        type: integer
    type: object
  dto.TShirtsUpdateRequest:
    properties:
      code:
        type: string
      recaptchaCode:
        type: string
      screenshotLink:
        type: string
      size:
        type: string
    type: object
  dto.UserInfoRequest:
    properties:
      info_type:
        type: string
      user_info:
        type: string
    required:
    - info_type
    - user_info
    type: object
  dto.UserInfoResponse:
    properties:
      address:
        type: string
      city:
        type: string
      college:
        $ref: '#/definitions/dto.CollegeResponse'
      collegeID:
        type: integer
      country:
        type: string
      degree:
        type: string
      email:
        type: string
      fullName:
        type: string
      gender:
        $ref: '#/definitions/models.Gender'
      id:
        type: integer
      isDauth:
        type: boolean
      name:
        type: string
      nationality:
        type: string
      otherCollege:
        type: string
      password:
        items:
          type: integer
        type: array
      phone:
        type: string
      pincode:
        type: string
      referralCode:
        type: string
      sponsor:
        type: string
      state:
        type: string
      tshirtSize:
        type: string
      voucherName:
        type: string
      year:
        type: string
    type: object
  models.AdminRole:
    enum:
    - ADMIN
    - OC
    - PR
    - TREZ
    - CORE
    - HOSPI
    type: string
    x-enum-varnames:
    - ADMIN
    - OC
    - PR
    - TREZ
    - CORE
    - HOSPI
  models.Gender:
    enum:
    - MALE
    - FEMALE
    - OTHER
    type: string
    x-enum-varnames:
    - MALE
    - FEMALE
    - OTHER
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server for all fests
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: FestAPI v2
  version: "1.0"
paths:
  /api/admin/login:
    post:
      consumes:
      - application/json
      description: Authenticates an admin user and returns a JWT token for authentication.
      operationId: AuthAdminLogin
      parameters:
      - description: Admin authentication request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Authenticate and log in an admin.
      tags:
      - Admin
  /api/admin/verify:
    get:
      description: Verifies the status of an admin.
      operationId: AdminVerify
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Verify Admin status.
      tags:
      - Admin
  /api/admin/verify_user:
    post:
      consumes:
      - application/json
      description: If providing emailid, info_type should be "email" or "jwt" for
        QR.
      operationId: VerifyUser
      parameters:
      - description: User Info request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserInfoResponse'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get the User details.
      tags:
      - Admin
  /api/colleges:
    get:
      description: Fetches colleges Id and name of all colleges.
      operationId: Colleges
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CollegeResponse'
            type: array
        "500":
          description: Error fetching colleges
          schema:
            type: string
      summary: Get details of all colleges
      tags:
      - Public
  /api/events/abstract/details/{event_id}:
    get:
      description: Retrieve the details of the abstract for the specified event.
      operationId: EventAbstractDetails
      parameters:
      - description: EventID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.AbstractDetailsResponse'
        "400":
          description: Invalid Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Event not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Event's Abstract Details
      tags:
      - Event
  /api/events/register:
    post:
      description: Register the user for the specified event.
      operationId: EventRegister
      parameters:
      - description: Event Registration Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.EventRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Register the user for an event.
      tags:
      - Event
  /api/events/status/:event_id:
    get:
      consumes:
      - application/json
      description: Get the registration status of an event for the given user
      parameters:
      - description: JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Event status request object
        in: body
        name: eventStatusRequest
        required: true
        schema:
          $ref: '#/definitions/dto.EventStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EventStatusResponse'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get event status
      tags:
      - Events
  /api/events/user/registered:
    get:
      description: Retrieve a list of events registered by the user.
      operationId: UserEventDetails
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            items:
              $ref: '#/definitions/dto.GetEventDetailsResponse'
            type: array
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get details of events registered by a user.
      tags:
      - Event
      - User
  /api/hospi/allocate/room:
    post:
      consumes:
      - application/json
      description: Allocates room for a given user if available
      operationId: AllocateRoom
      parameters:
      - description: Room allocation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AllocateRoomRequest'
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Allocate room for user
      tags:
      - Hospi
  /api/hospi/checkInStatus:
    post:
      consumes:
      - application/json
      description: returns check-details of user if they've paid online
      operationId: CheckInStatus
      parameters:
      - description: Check in status request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CheckInStatusRequest'
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.CheckInStatusResponse'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Check-In status of a visitor.
      tags:
      - Hospi
  /api/hospi/deleteRoom:
    delete:
      consumes:
      - application/json
      description: Delete a room with the provided ID.
      operationId: DeleteRoom
      parameters:
      - description: Delete room request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteRoomRequest'
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete a room.
      tags:
      - Hospi
  /api/hospi/getHostels:
    get:
      description: Retrieve the details of the hostels.
      operationId: GetHostels
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.GetHostelsResponse'
        "400":
          description: Hostels not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all the Hostels
      tags:
      - Hospi
  /api/hospi/getRooms:
    get:
      description: Retrieve the details of the rooms along with the hostel name.
      operationId: GetRooms
      parameters:
      - description: Hostel ID
        in: query
        name: hostel_id
        type: string
      - description: Floor Number
        in: query
        name: floor
        type: string
      - description: If 0, returns only free rooms. If 1, returns all.
        in: query
        name: is_filled
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.GetRoomsResponse'
        "400":
          description: Rooms not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all the Rooms
      tags:
      - Hospi
  /api/hospi/updateHostel:
    post:
      consumes:
      - application/json
      description: Add/Update a new hostel with the provided details.
      operationId: AddUpdateHostel
      parameters:
      - description: Add/update hostel request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AddUpdateHostelRequest'
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Add/Update a new hostel.
      tags:
      - Hospi
  /api/hospi/updateRoom:
    post:
      consumes:
      - application/json
      description: Add/Update a new room with the provided details.
      operationId: AddUpdateRoom
      parameters:
      - description: Add/update room request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AddUpdateRoomRequest'
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Add/Update a new room.
      tags:
      - Hospi
  /api/pr/register:
    post:
      consumes:
      - application/json
      description: Register PR for a person who has just arrived on campus
      operationId: Register
      parameters:
      - description: PR Register Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Register PR
      tags:
      - PR
  /api/pr/registerStatus:
    get:
      consumes:
      - application/json
      description: Check the PR Registration Status of a person who has just arrived
        on campus
      operationId: RegisterStatus
      parameters:
      - description: User Email
        in: query
        name: user_email
        required: true
        type: string
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Check PR Registration Status.
      tags:
      - PR
  /api/treasury/addBill:
    post:
      consumes:
      - application/json
      description: 'Add a bill with its purpose: checkIn/checkOut/discount/fine/eventPass.'
      operationId: AddBill
      parameters:
      - description: Add bill request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AddBillRequest'
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Add a Bill.
      tags:
      - Treasury
  /api/treasury/townscript:
    post:
      consumes:
      - application/json
      description: Make a payment using Townscript.
      operationId: Townscript
      parameters:
      - description: Townscript request
        in: body
        name: request
        required: true
        schema:
          type: string
      - description: Secret Token
        in: query
        name: secret
        type: string
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Make a payment using Townscript.
      tags:
      - Treasury
  /api/user/dauth/callback:
    get:
      description: Callback url for DAuth, returns JWT token if successful
      operationId: DAuthUserLogin
      parameters:
      - description: DAuth code
        in: query
        name: code
        required: true
        type: string
      - description: type of site
        in: query
        name: site
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Authenticate user with DAuth
      tags:
      - User
  /api/user/details:
    get:
      description: profile information to be displayed.
      operationId: ProfileDetails
      produces:
      - application/json
      responses:
        "400":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - middleware.UserAuth: []
      summary: Profile information.
      tags:
      - Profile
  /api/user/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using email and password.
      operationId: AuthUserLogin
      parameters:
      - description: User authentication request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthUserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Authenticate and log in a user.
      tags:
      - User
  /api/user/qr:
    get:
      description: QR for the profile page.
      operationId: ProfileQR
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - middleware.UserAuth: []
      summary: QR Generation.
      tags:
      - Profile
  /api/user/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details.
      operationId: AuthUserRegister
      parameters:
      - description: User registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthUserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Register a new user.
      tags:
      - User
  /api/user/update:
    patch:
      consumes:
      - application/json
      description: Update user information with the provided details.
      operationId: AuthUserUpdate
      parameters:
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthUserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - middleware.UserAuth: []
      - ApiKeyAuth: []
      summary: Update user information.
      tags:
      - User
  /tshirt/updateSize:
    post:
      description: Update the TShirt size for the user.
      operationId: TShirts
      parameters:
      - description: Add/update tshirt size
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TShirtsUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated TShirt Size
          schema:
            type: string
        "500":
          description: Error Updating TShirt Size
          schema:
            type: string
      summary: TShirt Size Update
      tags:
      - TShirts
securityDefinitions:
  ApiKeyAuth:
    description: Authorization token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
