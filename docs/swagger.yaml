basePath: /
definitions:
  dto.AbstractDetailsResponse:
    properties:
      forward_email:
        type: string
      max_participants:
        type: integer
    type: object
  dto.AuthAdminRequest:
    properties:
      admin_password:
        type: string
      admin_username:
        type: string
    required:
    - admin_password
    - admin_username
    type: object
  dto.AuthUserLoginRequest:
    properties:
      user_email:
        type: string
      user_password:
        type: string
    required:
    - user_email
    - user_password
    type: object
  dto.AuthUserRegisterRequest:
    properties:
      user_address:
        type: string
      user_city:
        type: string
      user_college:
        type: string
      user_country:
        type: string
      user_degree:
        type: string
      user_email:
        type: string
      user_fullname:
        type: string
      user_name:
        type: string
      user_nationality:
        type: string
      user_othercollege:
        type: string
      user_password:
        type: string
      user_phone:
        type: string
      user_pincode:
        type: string
      user_referral_code:
        type: string
      user_sex:
        type: string
      user_sponsor:
        type: string
      user_state:
        type: string
      user_voucher_name:
        type: string
      user_year:
        type: string
    type: object
  dto.AuthUserUpdateRequest:
    properties:
      user_address:
        type: string
      user_city:
        type: string
      user_college:
        type: string
      user_country:
        type: string
      user_degree:
        type: string
      user_nationality:
        type: string
      user_othercollege:
        type: string
      user_phone:
        type: string
      user_pincode:
        type: string
      user_referral_code:
        type: string
      user_sex:
        type: string
      user_sponsor:
        type: string
      user_state:
        type: string
      user_voucher_name:
        type: string
      user_year:
        type: string
    type: object
  dto.EventRegistrationRequest:
    properties:
      event_id:
        type: integer
    type: object
  dto.GetEventDetailsResponse:
    properties:
      event_id:
        type: integer
      event_name:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server for all fests
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: FestAPI v2
  version: "1.0"
paths:
  /api/admin/login:
    post:
      consumes:
      - application/json
      description: Authenticates an admin user and returns a JWT token for authentication.
      operationId: AuthAdminLogin
      parameters:
      - description: Admin authentication request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Authenticate and log in an admin.
      tags:
      - Admin
  /api/admin/verify:
    get:
      description: Verifies the status of an admin.
      operationId: AdminVerify
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Verify Admin status.
      tags:
      - Admin
  /api/events/abstract/details/{event_id}:
    get:
      description: Retrieve the details of the abstract for the specified event.
      operationId: EventAbstractDetails
      parameters:
      - description: EventID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.AbstractDetailsResponse'
        "400":
          description: Invalid Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Event not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Event's Abstract Details
      tags:
      - Event
  /api/events/register:
    post:
      description: Register the user for the specified event.
      operationId: EventRegister
      parameters:
      - description: Event Registration Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.EventRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Register the user for an event.
      tags:
      - Event
  /api/events/user/registered:
    get:
      description: Retrieve a list of events registered by the user.
      operationId: UserEventDetails
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            items:
              $ref: '#/definitions/dto.GetEventDetailsResponse'
            type: array
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get details of events registered by a user.
      tags:
      - Event
      - User
  /api/user/dauth/callback:
    get:
      description: Callback url for DAuth, returns JWT token if successful
      operationId: DAuthUserLogin
      parameters:
      - description: DAuth code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Authenticate user with DAuth
      tags:
      - User
  /api/user/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using email and password.
      operationId: AuthUserLogin
      parameters:
      - description: User authentication request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthUserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Authenticate and log in a user.
      tags:
      - User
  /api/user/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details.
      operationId: AuthUserRegister
      parameters:
      - description: User registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthUserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Register a new user.
      tags:
      - User
  /api/user/update:
    patch:
      consumes:
      - application/json
      description: Update user information with the provided details.
      operationId: AuthUserUpdate
      parameters:
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthUserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - middleware.UserAuth: []
      - ApiKeyAuth: []
      summary: Update user information.
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    description: Authorization token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
